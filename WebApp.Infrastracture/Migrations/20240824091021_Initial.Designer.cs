// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WebApp.Infrastracture;

#nullable disable

namespace WebApp.Infrastructure.Migrations
{
    [DbContext(typeof(PetFamilyDbContext))]
    [Migration("20240824091021_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("WebApp.Domain.Entities.Pet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AnimalAttitude")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("animal_attitude");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("birth_date");

                    b.Property<string>("Breed")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("breed");

                    b.Property<bool>("Castration")
                        .HasColumnType("boolean")
                        .HasColumnName("castration");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("color");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2024, 8, 24, 9, 10, 21, 28, DateTimeKind.Utc).AddTicks(2508))
                        .HasColumnName("created_time");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Health")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("health");

                    b.Property<int?>("Height")
                        .HasMaxLength(1000)
                        .HasColumnType("integer")
                        .HasColumnName("height");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nickname");

                    b.Property<bool>("OnTreatment")
                        .HasColumnType("boolean")
                        .HasColumnName("on_treatment");

                    b.Property<bool>("OnlyOneInFamily")
                        .HasColumnType("boolean")
                        .HasColumnName("only_one_in_family");

                    b.Property<string>("PeopleAttitude")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("people_attitude");

                    b.Property<bool>("Vaccine")
                        .HasColumnType("boolean")
                        .HasColumnName("vaccine");

                    b.ComplexProperty<Dictionary<string, object>>("Address", "WebApp.Domain.Entities.Pet.Address#Address", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Building")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("building");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("city");

                            b1.Property<string>("Index")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("index");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("street");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("ContactPhoneNumber", "WebApp.Domain.Entities.Pet.ContactPhoneNumber#PhoneNumber", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Number")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("contact_phone_number");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Place", "WebApp.Domain.Entities.Pet.Place#Place", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("value");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("VolunteerPhoneNumber", "WebApp.Domain.Entities.Pet.VolunteerPhoneNumber#PhoneNumber", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Number")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("volunteer_phone_number");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Weight", "WebApp.Domain.Entities.Pet.Weight#Weight", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<int>("Grams")
                                .HasColumnType("integer")
                                .HasColumnName("weight");
                        });

                    b.HasKey("Id")
                        .HasName("pk_pets");

                    b.ToTable("pets", (string)null);
                });

            modelBuilder.Entity("WebApp.Domain.Entities.Photo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("IsMain")
                        .HasColumnType("boolean")
                        .HasColumnName("is_main");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("path");

                    b.Property<Guid?>("PetId")
                        .HasColumnType("uuid")
                        .HasColumnName("pet_id");

                    b.HasKey("Id")
                        .HasName("pk_photo");

                    b.HasIndex("PetId")
                        .HasDatabaseName("ix_photo_pet_id");

                    b.ToTable("photo", (string)null);
                });

            modelBuilder.Entity("WebApp.Domain.Entities.Vaccination", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("Applied")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("applied");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid?>("PetId")
                        .HasColumnType("uuid")
                        .HasColumnName("pet_id");

                    b.HasKey("Id")
                        .HasName("pk_vaccination");

                    b.HasIndex("PetId")
                        .HasDatabaseName("ix_vaccination_pet_id");

                    b.ToTable("vaccination", (string)null);
                });

            modelBuilder.Entity("WebApp.Domain.Entities.Photo", b =>
                {
                    b.HasOne("WebApp.Domain.Entities.Pet", null)
                        .WithMany("Photos")
                        .HasForeignKey("PetId")
                        .HasConstraintName("fk_photo_pets_pet_id");
                });

            modelBuilder.Entity("WebApp.Domain.Entities.Vaccination", b =>
                {
                    b.HasOne("WebApp.Domain.Entities.Pet", null)
                        .WithMany("Vaccinations")
                        .HasForeignKey("PetId")
                        .HasConstraintName("fk_vaccination_pets_pet_id");
                });

            modelBuilder.Entity("WebApp.Domain.Entities.Pet", b =>
                {
                    b.Navigation("Photos");

                    b.Navigation("Vaccinations");
                });
#pragma warning restore 612, 618
        }
    }
}
